from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from sqlite_database import DB

worker_look_in_orderid_router = Router()


async def create_kb(worker_id: str | int, order_id: str | int) -> InlineKeyboardMarkup | None:
    async with DB() as db:
        inwork = await db.select_inwork_by_worker_n_order_id(worker_id, order_id)

        if inwork['start_date'] is None and inwork['end_date'] is None:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–±–æ—Ç–µ',
                                      callback_data=f'start_work_on_order={order_id}')],
            ])
        elif inwork['start_date'] is not None and inwork['end_date'] is None:
            return InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É',
                                      callback_data=f'end_work_on_order={order_id}')],
            ])
        else:
            return None


@worker_look_in_orderid_router.callback_query(F.data.contains('worker_look_in_orderid'))
async def worker_look_in_orderid_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.answer('')
        order_id = callback.data.split('=')[-1]

        async with DB() as db:
            order_info = await db.select_order_by_id(order_id)

            if order_info['long_time'] and order_info['long_days'] > 0:
                ll_txt = (f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {order_info['long_days']}</u>\n'
                          f'–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –¥–æ –∫–∞–∫–æ–≥–æ –æ–Ω —á–∏—Å–ª–∞.')
            elif order_info['long_time'] and order_info['long_days'] == 0:
                ll_txt = f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.</u>'
            else:
                ll_txt = f'<u>–≠—Ç–æ –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑.</u>'

            await callback.message.answer(
                text=f'üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_info['date'].replace('.20', '.')}</b>\n--------------\n'
                     f'üë• <i>–õ—é–¥–µ–π –Ω–∞–¥–æ</i>: {order_info['how_many_ppl']}\n--------------\n'
                     f'üè† <i>–ê–¥—Ä–µ—Å</i>: {order_info['address']}\n--------------\n'
                     f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n{order_info['work_desc']}\n--------------\n'
                     f'üíµ <i>–û–ø–ª–∞—Ç–∞ (—Ä—É–±/—á–∞—Å)</i> {order_info['payment']}\n--------------\n'
                     f'üìû <i>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫</i>\n{order_info['help_phone']}\n--------------\n\n'
                     f'‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                     f'üè† <i>–ê–¥—Ä–µ—Å</i>:\n{order_info['FULL_address']}\n--------------\n'
                     f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>:\n{order_info['FULL_work_desc']}\n--------------\n'
                     f'üìû <i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞</i>:\n{order_info['FULL_phones']}\n--------------\n'
                     f'üìù<i>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>:\n{order_info['FULL_additional_info']}\n--------------\n\n' + ll_txt,
                parse_mode='HTML',
                reply_markup=await create_kb(callback.from_user.id, order_id),
            )

    except Exception as e:
        logger.error(f'Error in worker_look_in_orderid_handler: {e}')
