from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from sqlite_database import DB

join_order_router = Router()


@join_order_router.callback_query(F.data.contains('join_to_order_request'))
async def join_to_order_request_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.answer('')
        order_id = callback.data.split('=')[-1]
        async with DB() as db:

            worker = await db.get_worker_by_tg_id(callback.from_user.id)
            if not worker:
                await callback.message.answer(
                    text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n'
                         '–ù–∞–ø–∏—à–∏—Ç–µ /start –ø–æ—Å–ª–µ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                         '–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                )
                return

            possible_inwork = await db.select_inwork_by_worker_n_order_id(callback.from_user.id, order_id)
            if possible_inwork:
                await callback.message.answer(
                    text='–í—ã —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!',
                )
                return

            order_info = await db.select_order_by_id(order_id)

            if str(order_info['customer_id']) == str(callback.from_user.id):
                await callback.message.answer(
                    text='–í—ã —Å–∞–º–∏ —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.'
                )
                return

            needed_ppl_in_order = order_info['how_many_ppl']
            candidates = await db.select_all_inwork_by_order_id(order_id)

            if len(candidates) < needed_ppl_in_order:  # not enough ppl in order
                lastrowid = await db.insert_inwork(
                    order_id=order_id,
                    worker_id=callback.from_user.id,
                )
                await callback.message.answer(
                    text=f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã".',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text='üë∑‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
                                              callback_data='active_work')]
                    ])
                )

                await callback.bot.send_message(
                    chat_id=order_info['customer_id'],
                    text=f'–ù–∞ –≤–∞—à –∑–∞–∫–∞–∑ -- {order_info['date']} - {order_info['address']} -- –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n'
                         f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ:</b>\n'
                         f'–§–ò–û: {worker['full_name']}\n'
                         f'–¢–µ–ª–µ—Ñ–æ–Ω: {worker["contact_number"]}\n'
                         f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {worker['date_of_birth']}\n'
                         f'–û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {worker['area_of_residence']}\n'
                         f'–†–µ–π—Ç–∏–Ω–≥: {worker['rating']}',
                    parse_mode=ParseMode.HTML,
                )
            else:  # all ppl founded
                await callback.message.answer(
                    text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —É–∂–µ –Ω–∞—à–ª–æ—Å—å... –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å! '
                         f'–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –∑–∞–∫–∞–∑—ã!',
                    parse_mode='HTML',
                )

    except Exception as e:
        logger.error(f'Error in join_to_order_request_handler: {e}')
