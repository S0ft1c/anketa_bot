from datetime import datetime

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

from sqlite_database import DB

view_review_id_router = Router()


async def create_kb(review_id, counted_hours):
    if counted_hours == '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å.':
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤',
                                  callback_data=f'admin_self_hours_commit={review_id}'), ],
            [InlineKeyboardButton(text='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏—à–µ–ª',
                                  callback_data=f'admin_minus_worker={review_id}'), ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                  callback_data='admin_hours_commit_list')],
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤',
                                  callback_data=f'admin_submit_hours_commit={review_id}={counted_hours}'), ],
            [InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤',
                                  callback_data=f'admin_self_hours_commit={review_id}'), ],
            [InlineKeyboardButton(text='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –ø—Ä–∏—à–µ–ª',
                                  callback_data=f'admin_minus_worker={review_id}'), ],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                  callback_data='admin_hours_commit_list')],
        ])


@view_review_id_router.callback_query(F.data.contains('view_review_id'))
async def view_review_id_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.answer('')
        review_id = callback.data.split('=')[-1]

        async with DB() as db:
            rev_info = await db.select_review_by_id(review_id)

        await callback.message.answer(
            text='<b><i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É:</i></b>\n\n'
                 f'üìÖ <b>–ó–∞–∫–∞–∑ –æ—Ç {rev_info['date']}</b>\n'
                 f'üë• <i>–õ—é–¥–µ–π –Ω–∞–¥–æ</i>:\n{rev_info['how_many_ppl']}\n'
                 f'üè† <i>–ê–¥—Ä–µ—Å</i>:\n{rev_info['address']}\n'
                 f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n{rev_info['work_desc']}\n'
                 f'üíµ <i>–û–ø–ª–∞—Ç–∞ (—Ä—É–±/—á–∞—Å)</i>\n{rev_info['payment']}\n'
                 f'üìû <i>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫</i>\n{rev_info['help_phone']}\n\n'
                 f'‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                 f'üè† <i>–ê–¥—Ä–µ—Å</i>:\n{rev_info['FULL_address']}\n'
                 f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>:\n{rev_info['FULL_work_desc']}\n'
                 f'üìû <i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞</i>:\n{rev_info['FULL_phones']}\n'
                 f'üìù<i>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>:\n{rev_info['FULL_additional_info']}\n\n'
                 f'{f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. => –°—Ä–æ–∫–∏ {rev_info['long_days']} –¥–Ω.</u>' if rev_info['long_time']
                 else f'–≠—Ç–æ –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑.'}',
            parse_mode='HTML',
        )
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=f'<b>–û—Ç—á–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n'
                 f'{rev_info["report"]}\n',
            parse_mode='HTML',
        )
        if rev_info['start_date'] and rev_info['end_date']:
            counted_hours = datetime.strptime(str(rev_info['end_date']), "%H:%M %d.%m.%Y") - \
                            datetime.strptime(str(rev_info['start_date']), "%H:%M %d.%m.%Y")
            counted_hours = int(counted_hours.total_seconds() // 3600)
        else:
            counted_hours = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å.'
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text=f'<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞, –≤–Ω–µ—Å–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º:</b>\n'
                 f'{rev_info["start_date"]} -- {rev_info['end_date']}\n'
                 f'–ü–æ—Å—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–∏—Å—Ç–µ–º–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ = {counted_hours}\n',
            parse_mode='HTML',
            reply_markup=await create_kb(review_id, counted_hours)
        )
    except Exception as e:
        logger.error(f'Error in view_review_id_handler: {e}')
