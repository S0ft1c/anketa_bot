from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from loguru import logger

from sqlite_database import DB

send_to_exact_person_router = Router()


class SendToExactPerson(StatesGroup):
    order_id = State()
    entity = State()


@send_to_exact_person_router.callback_query(F.data.contains('send_to_exact_person'))
async def send_to_exact_person_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.clear()
        order_id = callback.data.split('=')[-1]
        await state.update_data(order_id=order_id)
        await state.set_state(SendToExactPerson.entity)

        await callback.message.answer(
            text='–ß—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n'
                 '<pre>@username</pre>\n'
                 '–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
                 '<pre>11111111</pre>',
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'view_order_by_id={order_id}')]
            ])
        )

    except Exception as e:
        logger.error(f'Error in send_to_exact_person_handler: {e}')


@send_to_exact_person_router.message(SendToExactPerson.entity)
async def send_to_exact_person_handler_2(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data['order_id']
        try:
            if message.text.startswith('@'):

                async with DB() as db:
                    order = await db.select_order_by_id(order_id=order_id)
                    worker = await db.select_worker_by_username(message.text.replace('@', ''))

            elif message.text[0].isdigit():
                async with DB() as db:
                    order = await db.select_order_by_id(order_id=order_id)
                    worker = {'telegram_id': message.text}

            else:
                await message.answer(
                    text='–í–∏–¥–∏–º–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º (–∏–ª–∏ id) –∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n'
                         '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'view_order_by_id={order_id}')]
                    ])
                )
                return

            if order['long_time'] and order['long_days'] > 0:
                ll_txt = (f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {order['long_time']}</u>\n'
                          f'–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –¥–æ –∫–∞–∫–æ–≥–æ –æ–Ω —á–∏—Å–ª–∞.')
            elif order['long_time'] and order['long_days'] == 0:
                ll_txt = f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.</u>'
            else:
                ll_txt = f'<u>–≠—Ç–æ –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑.</u>'

            await message.bot.send_message(
                chat_id=worker['telegram_id'],
                text=f'<b>–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n'
                     f'üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['date']}</b>\n--------------\n'
                     f'üë• <i>–õ—é–¥–µ–π –Ω–∞–¥–æ</i>:\n{order['how_many_ppl']}\n--------------\n'
                     f'üè† <i>–ê–¥—Ä–µ—Å</i>:\n{order['address']}\n--------------\n'
                     f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n{order['work_desc']}\n--------------\n'
                     f'üíµ <i>–û–ø–ª–∞—Ç–∞ (—Ä—É–±/—á–∞—Å)</i>\n{order['payment']}\n--------------\n'
                     f'üìû <i>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫</i>\n{order['help_phone']}\n--------------\n\n' + ll_txt,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–Ø –ø—Ä–∏–¥—É!',
                                          callback_data=f'join_to_order_request={order['id']}')],
                ])
            )
            await message.answer(
                text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'
            )

        except Exception as e:
            logger.warning(f'Cannot send message to exact person: {e}')
            await message.answer(
                text='–í–∏–¥–∏–º–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º (–∏–ª–∏ id) –∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n'
                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'view_order_by_id={order_id}')]
                ])
            )

    except Exception as e:
        logger.error(f'Error in send_to_exact_person_handler_2: {e}')
