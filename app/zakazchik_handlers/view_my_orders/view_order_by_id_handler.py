from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardButton, InlineKeyboardBuilder
from loguru import logger

from sqlite_database import DB

view_order_by_id_router = Router()


async def create_kb(order_id: int | str, is_long: bool):
    builder = InlineKeyboardBuilder()
    if is_long:
        builder.add(
            InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π', callback_data=f'edit_long_days_in_id={order_id}')
        )
    builder.add(
        InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'delete_order_by_id={order_id}')
    )
    builder.add(
        InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'end_order_by_id={order_id}')
    )
    builder.add(
        InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='view_my_orders')
    )
    return builder.adjust(1).as_markup()


@view_order_by_id_router.callback_query(F.data.contains('view_order_by_id'))
async def view_order_by_id_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.answer('')

        order_id = callback.data.split('=')[-1]
        async with DB() as db:
            order_info = await db.select_order_by_id(order_id)

        await callback.message.answer(
            text=f'üìÖ <b>–ó–∞–∫–∞–∑ –æ—Ç {order_info['date']}</b>\n'
                 f'üë• <i>–õ—é–¥–µ–π –Ω–∞–¥–æ</i>:\n{order_info['how_many_ppl']}\n'
                 f'üè† <i>–ê–¥—Ä–µ—Å</i>:\n{order_info['address']}\n'
                 f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n{order_info['work_desc']}\n'
                 f'üíµ <i>–û–ø–ª–∞—Ç–∞ (—Ä—É–±/—á–∞—Å)</i>\n{order_info['payment']}\n'
                 f'üìû <i>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫</i>\n{order_info['help_phone']}\n\n'
                 f'‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n'
                 f'üè† <i>–ê–¥—Ä–µ—Å</i>:\n{order_info['FULL_address']}\n'
                 f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>:\n{order_info['FULL_work_desc']}\n'
                 f'üìû <i>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞</i>:\n{order_info['FULL_phones']}\n'
                 f'üìù<i>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>:\n{order_info['FULL_additional_info']}\n\n'
                 f'{f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. => –°—Ä–æ–∫–∏ {order_info['long_days']} –¥–Ω.</u>' if order_info['long_time']
                 else f'–≠—Ç–æ –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑.'}',
            parse_mode='HTML',
            reply_markup=await create_kb(order_id, order_info['long_time'])
        )

    except Exception as e:
        logger.error(f'Error in view_order_by_id_handler -> {e}')
