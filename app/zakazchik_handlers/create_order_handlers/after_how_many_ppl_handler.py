from aiogram import Router
from aiogram.types import Message
from loguru import logger
from .create_order_states import CreateOrderStates
from utils import validate_how_many_ppl
from aiogram.fsm.context import FSMContext
from .back_to_zakazhick_btn import back_to_zakazhick_btn

after_how_many_ppl_router = Router()


@after_how_many_ppl_router.message(CreateOrderStates.how_many_ppl)
async def after_how_many_ppl_handler(message: Message, state: FSMContext):
    try:
        if not validate_how_many_ppl(message.text):
            await message.answer(
                text='<b>üßë‚Äçüè≠ –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π</b>\n\n'
                     '‚ùå –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.',
                parse_mode='HTML',
                reply_markup=back_to_zakazhick_btn
            )
        else:
            # update data
            await state.update_data(how_many_ppl=message.text)
            # update the state
            await state.set_state(CreateOrderStates.address)

            # answer
            await message.answer(
                text='<b>–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b> '
                     '<i>üèò –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞!</i>\n\n'
                     '–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ –≤–µ—Å—å –∞–¥—Ä–µ—Å, –∞ –ø—Ä–æ—Å—Ç–æ —Ä–∞–π–æ–Ω –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ.\n'
                     '–ü–æ–∑–¥–Ω–µ–µ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –∑–∞–∫–∞–∑.',
                parse_mode='HTML',
                reply_markup=back_to_zakazhick_btn
            )

    except Exception as e:
        logger.error(f'Error in after_how_many_ppl_handler -> {e}')
