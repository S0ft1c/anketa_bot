from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger

from utils import is_valid_datetime
from .back_to_zakazhick_btn import back_to_zakazhick_btn
from .create_order_states import CreateOrderStates

after_date_router = Router()


@after_date_router.message(CreateOrderStates.date)
async def after_date_hander(message: Message, state: FSMContext):
    try:
        if not is_valid_datetime(message.text):
            await message.answer(
                text='<b> üìÖ –£–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.</b>\n\n'
                     '‚ùå –í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                parse_mode='HTML',
                reply_markup=back_to_zakazhick_btn
            )
        else:
            # update the info
            await state.update_data(date=message.text)
            # update the StatesGroup
            await state.set_state(CreateOrderStates.how_many_ppl)

            # answer
            await message.answer(
                text='<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–∞–º–∏ –¥–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b> '
                     '<i>üßë‚Äçüè≠ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –Ω–∞–¥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã.</i>\n\n'
                     '–í–≤–µ–¥–∏—Ç–µ –¢–û–õ–¨–ö–û —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: <pre>2</pre>',
                parse_mode='HTML',
                reply_markup=back_to_zakazhick_btn
            )
    except Exception as e:
        logger.error(f'Error in after_date_handler -> {e}')
