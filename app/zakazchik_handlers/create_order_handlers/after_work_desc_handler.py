from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from .create_order_states import CreateOrderStates
from loguru import logger
from .back_to_zakazhick_btn import back_to_zakazhick_btn

after_work_desc_router = Router()


@after_work_desc_router.message(CreateOrderStates.work_desc)
async def after_work_desc_handler(message: Message, state: FSMContext):
    try:
        # update data
        await state.update_data(work_desc=message.text)
        # set the state
        await state.set_state(CreateOrderStates.payment)

        # answer
        await message.answer(
            text='<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b> '
                 '<i>üí∏ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é –æ–ø–ª–∞—Ç—É –ø–æ–ª—É—á–∞—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∏</i>\n\n'
                 '–û–ø–ª–∞—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ä—É–±/—á–∞—Å.',
            parse_mode='HTML',
            reply_markup=back_to_zakazhick_btn
        )
    except Exception as e:
        logger.error(f'Error in after_work_desc_handler -> {e}')
