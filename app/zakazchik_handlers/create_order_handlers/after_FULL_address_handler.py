from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from .create_order_states import CreateOrderStates
from loguru import logger
from .back_to_zakazhick_btn import back_to_zakazhick_btn

after_full_address_router = Router()


@after_full_address_router.message(CreateOrderStates.FULL_address)
async def after_full_address_handler(message: Message, state: FSMContext):
    try:
        await state.update_data(FULL_address=message.text)

        await state.set_state(CreateOrderStates.FULL_work_desc)

        await message.answer(
            text='<b>–£–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b> '
                 '<i>üî® –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.</i>\n\n'
                 '–û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–≤ –µ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫ –±—É–¥–µ—Ç —á–µ—Ç–∫–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –æ—Ç '
                 '–Ω–µ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è.',
            parse_mode='HTML',
            reply_markup=back_to_zakazhick_btn
        )
    except Exception as e:
        logger.error(f'Erro in after_full_address_handler -> {e}')
