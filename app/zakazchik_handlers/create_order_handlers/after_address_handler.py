from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from .create_order_states import CreateOrderStates
from loguru import logger
from .back_to_zakazhick_btn import back_to_zakazhick_btn

after_address_handler_router = Router()


@after_address_handler_router.message(CreateOrderStates.address)
async def after_address_handler(message: Message, state: FSMContext):
    try:
        # update data
        await state.update_data(address=message.text)
        # set new state
        await state.set_state(CreateOrderStates.work_desc)

        # answer
        await message.answer(
            text='<b>–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b> '
                 '<i>üî® –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n\n'
                 '–û–ø—è—Ç—å –∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–¥–Ω–µ–µ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —É–∫–∞–∑–∞—Ç—å '
                 '–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Ä–∞–±–æ—Ç—É.',
            parse_mode='HTML',
            reply_markup=back_to_zakazhick_btn
        )
    except Exception as e:
        logger.error(f'Error in after_address_handler_router -> {e}')
