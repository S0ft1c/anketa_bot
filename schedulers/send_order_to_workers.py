import asyncio
import os

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from loguru import logger

from sqlite_database import DB

load_dotenv()
bot_url = os.environ.get("BOT_URL")


async def send_message_to_worker(bot: Bot, order, worker):
    try:
        if order['long_time'] and order['long_days'] > 0:
            ll_txt = (f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {order['long_days']}</u>\n'
                      f'–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –¥–æ –∫–∞–∫–æ–≥–æ –æ–Ω —á–∏—Å–ª–∞.')
        elif order['long_time'] and order['long_days'] == 0:
            ll_txt = f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.</u>'
        else:
            ll_txt = f'<u>–≠—Ç–æ –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑.</u>'

        await bot.send_message(
            chat_id=worker['telegram_id'],
            text=f'<b>–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n'
                 f'üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['date'].replace('.20', '.')}</b>\n--------------\n'
                 f'üë• <i>–õ—é–¥–µ–π –Ω–∞–¥–æ</i>: {order['how_many_ppl']}\n--------------\n'
                 f'üè† <i>–ê–¥—Ä–µ—Å</i>: {order['address']}\n--------------\n'
                 f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n{order['work_desc']}\n--------------\n'
                 f'üíµ <i>–û–ø–ª–∞—Ç–∞ (—Ä—É–±/—á–∞—Å)</i> {order['payment']}\n--------------\n'
                 f'üìû <i>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫</i>\n{order['help_phone']}\n--------------\n\n' + ll_txt,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –ø—Ä–∏–¥—É!',
                                      callback_data=f'join_to_order_request={order['id']}')],
            ])
        )
    except Exception as e:
        logger.error(f'Error in schedulers.send_message_to_workers: {e}')


async def send_message_to_group(bot: Bot, order):
    try:
        load_dotenv()

        if order['long_time'] and order['long_days'] > 0:
            ll_txt = (f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = {order['long_days']}</u>\n'
                      f'–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –¥–æ –∫–∞–∫–æ–≥–æ –æ–Ω —á–∏—Å–ª–∞.')
        elif order['long_time'] and order['long_days'] == 0:
            ll_txt = f'<u>–≠—Ç–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑. –ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.</u>'
        else:
            ll_txt = f'<u>–≠—Ç–æ –Ω–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑.</u>'

        await bot.send_message(
            chat_id=os.environ.get('GROUP_ID'),
            text=f'<b>–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n'
                 f'üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['date'].replace('.20', '.')}</b>\n--------------\n'
                 f'üë• <i>–õ—é–¥–µ–π –Ω–∞–¥–æ</i>: {order['how_many_ppl']}\n--------------\n'
                 f'üè† <i>–ê–¥—Ä–µ—Å</i>: {order['address']}\n--------------\n'
                 f'üîß <i>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</i>\n{order['work_desc']}\n--------------\n'
                 f'üíµ <i>–û–ø–ª–∞—Ç–∞ (—Ä—É–±/—á–∞—Å)</i> {order['payment']}\n--------------\n'
                 f'üìû <i>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫</i>\n{order['help_phone']}\n--------------\n\n' + ll_txt,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–Ø –ø—Ä–∏–¥—É!',
                                      url=f'{bot_url}?start={order["id"]}')],
            ])
        )
    except Exception as e:
        logger.error(f'Error in schedulers.send_message_to_group: {e}')


async def send_order_to_workers(bot: Bot, order_id: int | str):
    try:
        async with DB() as db:
            order = await db.select_order_by_id(order_id)
            workers = await db.get_all_workers()

        # green workers first
        for worker in workers['green']:
            await send_message_to_worker(bot, order, worker)
            await asyncio.sleep(5)

        await asyncio.sleep(10 * 60)  # wait for 10 minutes

        # yellow workers second
        for worker in workers['yellow']:
            await send_message_to_worker(bot, order, worker)
            await asyncio.sleep(5)

        await asyncio.sleep(15 * 60)  # wait for 15 minutes

        # red on the third (to group)
        await send_message_to_group(bot, order)

        logger.info(f'All workers got messages')
    except Exception as e:
        logger.error(f'Error in send_order_to_workers: {e}')
